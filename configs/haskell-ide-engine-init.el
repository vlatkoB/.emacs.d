;;; package --- haskell-ide-engine-init
;;; Commentary:
;;; Code:


;; Haskell IDE engine


(use-package lsp-mode
  :ensure t
  :config

  ;; make sure we have lsp-imenu everywhere we have LSP
  (require 'lsp-imenu)
  (add-hook 'lsp-after-open-hook 'lsp-enable-imenu)
  ;; get lsp-python-enable defined
  ;; NB: use either projectile-project-root or ffip-get-project-root-directory
  ;;     or any other function that can be used to find the root directory of a project
  (lsp-define-stdio-client lsp-python "python"
                           #'projectile-project-root
                           '("pyls"))

  ;; make sure this is activated when python-mode is activated
  ;; lsp-python-enable is created by macro above
  (add-hook 'python-mode-hook (lambda () (lsp-python-enable)))

  ;; lsp extras
  (use-package lsp-ui :ensure t
    :config
		  (setq lsp-ui-sideline-ignore-duplicate t)
      (add-hook 'lsp-mode-hook 'lsp-ui-mode))

  (use-package company-lsp :ensure t
    :config
      (push 'company-lsp company-backends))

  ;; NB: only required if you prefer flake8 instead of the default
  ;; send pyls config via lsp-after-initialize-hook -- harmless for
  ;; other servers due to pyls key, but would prefer only sending this
  ;; when pyls gets initialised (:initialize function in
  ;; lsp-define-stdio-client is invoked too early (before server
  ;; start)) -- cpbotha
  (defun lsp-set-cfg ()
    (let ((lsp-cfg `(:pyls (:configurationSources ("flake8")))))
      ;; TODO: check lsp--cur-workspace here to decide per server / project
      (lsp--set-configuration lsp-cfg)))

  (add-hook 'lsp-after-initialize-hook 'lsp-set-cfg)
	)

(with-eval-after-load 'lsp-mode
  (require 'lsp-flycheck)
	)


(use-package lsp-haskell :ensure t ;; :disabled
  :init
	  (add-hook 'haskell-mode-hook #'lsp-haskell-enable)
	  (add-hook 'haskell-mode-hook 'flycheck-mode)
 )



(provide 'haskell-ide-engine-init)

;;; haskell-ide-engine-init ends here

;; (lsp-define-stdio-client
;;   ;; This can be a symbol of your choosing. It will be used as a the
;;   ;; prefix for a dynamically generated function "-enable"; in this
;;   ;; case: lsp-prog-major-mode-enable
;;   lsp-haskell
;;   "haskell"
;;   ;; This will be used to report a project's root directory to the LSP
;;   ;; server.
;;   (lambda () default-directory)
;;   ;; This is the command to start the LSP server. It may either be a
;;   ;; string containing the path of the command, or a list wherein the
;;   ;; car is a string containing the path of the command, and the cdr
;;   ;; are arguments to that command.
;;   '("hie" "" "")
;; 	)

;; ;; Here we'll add the function that was dynamically generated by the
;; ;; call to lsp-define-stdio-client to the major-mode hook of the
;; ;; language we want to run it under.
;; ;;
;; ;; This function will turn lsp-mode on and call the command given to
;; ;; start the LSP server.
;; (add-hook 'prog-major-mode #'lsp-haskell-enable)
